1. Your first challenge is to print "hello world" on the terminal in a single command.
	Hint: There are many ways to print text on the command line, one way is with the 'echo' command. Try it below and good luck!

	--> echo "hello world"

2. Print the current working directory.
	
	--> pwd

3. List names of all the files in the current directory, one file per line.

	--> ls

4. There is a file named access.log in the current directory. Print the contents.

	--> cat access.log

5. Print the last 5 lines of "access.log".

	--> tail -n 5 ./access.log

6. Create an empty file named take-the-command-challenge in the current working directory.

	--> touch take-the-command-challenge

7. Create a directory named tmp/files in the current working directory.
	Hint: The directory "tmp/" doesn't exist, with one command you need to create both "tmp/" and "tmp/files"

	--> mkdir -p ./tmp/files

8. Copy the file named take-the-command-challenge to the directory tmp/files.

	--> cp ./take-the-command-challenge ./tmp/files

9. Move the file named take-the-command-challenge to the directory tmp/files.

	--> mv ./take-the-command-challenge ./tmp/files

10. A symbolic link is a type of file that is a reference to another file.
	Create a symbolic link named take-the-command-challenge that points to the file tmp/files/take-the-command-challenge.

	--> ln -s ./tmp/files/take-the-command-challenge take-the-command-challenge

11. Delete all of the files in this challenge directory including all subdirectories and their contents.
	Hint: There are files and directories that start with a dot ".", "rm -rf *" won't work here!

	--> rm -rf {,.[!.],..?}*

12. There are files in this challenge with different file extensions. Remove all files with the .doc extension
	recursively in the current working directory.

	--> find . -name "*.doc" -type f -delete

13. There is a file named access.log in the current working directory. Print all lines in this file that contains the string "GET".

	--> grep "GET" access.log

14. Print all files in the current directory, one per line (not the path, just the filename) that contain the string "500".

	--> grep -l "500" *

15. Print the relative file paths, one path per line for all filenames that start with "access.log" in the current directory.

	--> ls ./access.log*

	Tips: It is always better to use find in the GNU systems,
		(another solution) --> find . -name "access.log*"
			***This solution is prefered to the previous one***

16.Print all matching lines (without the filename or the file path) in all files under the current directory that start with "access.log" that contain the string "500".
	Note that there are no files named access.log in the current directory, you will need to search recursively.

	--> find . -name "access.log*" -exec grep -h "500" {} \;

	Tips: Here when the -h option is supplied to grep, the filename is ommited and only the matching line will be printed.
		(another solution) --> grep -h "500" `find . -name "access.log*"`

17.Extract all IP addresses from files that start with "access.log" printing one IP address per line.

	--> find . -name "access.log*" -exec grep -Eo "[0, 9]{1, 3}\.[0, 9]{1, 3}\.[0, 9]{1, 3}\.[0, 9]{1, 3}" {} \; 
